pipeline {
    agent any
    tools {git 'Default'}

    environment {
        branch = 'branch0723'
        SERVICE_ENV = "test"
        service_name = 'backend'
        group_id = 'Backend'
        docker_data_id = 'test.yaml'
        credentials_data_id = 'credentials.json'
        image_name = "${harbor_domain}/backend/${service_name}"
        repository_url = "git@github.com:AutoGameAI/Backend.git"
        GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
        namespace_id = '9cae255e-c01b-4fa3-bfcd-c0bb3030a565&namespaceId=9cae255e-c01b-4fa3-bfcd-c0bb3030a565'
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
    }

    stages {
        stage('Check Workspace') {
            steps {
                script {
                    echo "当前工作目录: ${WORKSPACE}"
                    sh "rm -rf ./app"
                }
            }
        }

        stage('Prepare Environment') {
            steps {
                script {
                    env._version = "test_" + new Date().format('yyyyMMddHHmmss')
                    echo "构建分支：${env.branch} 版本号：${env._version}"
                }
            }
        }

        stage('Get Code') {
            steps {
                echo "拉取项目代码：${env.branch}"
                dir('app') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: branch]],
                        userRemoteConfigs: [[
                            url: repository_url,
                            credentialsId: 'GitHubSSH'
                        ]]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        echo "构建镜像"
                        dir('app') {
                            withCredentials([
                                string(credentialsId: 'harbor_username', variable: 'HARBOR_USERNAME'),
                                string(credentialsId: 'harbor_password', variable: 'HARBOR_PASSWORD')
                            ]) {
                                sh """
                                echo "$HARBOR_PASSWORD" | docker login ${harbor_domain} -u $HARBOR_USERNAME --password-stdin
                                """
                            }
                            sh """
                            docker build -t ${image_name}:${env._version} .
                            docker push ${image_name}:${env._version}
                            docker rmi -f ${image_name}:${env._version}
                            """
                        }
                    } catch (e) {
                        error "构建镜像失败: ${e}"
                    }
                }
            }
        }

        stage('Deploy Service') {
            steps {
                script {
                    try {
                        def node = env.test_node_1
                        echo "部署服务：${node}"
                        withCredentials([
                            string(credentialsId: 'harbor_username', variable: 'HARBOR_USERNAME'),
                            string(credentialsId: 'harbor_password', variable: 'HARBOR_PASSWORD')
                        ]) {
                            sh """
                            echo "$HARBOR_PASSWORD" | ssh -o StrictHostKeyChecking=no root@${node} 'docker login ${harbor_domain} -u $HARBOR_USERNAME --password-stdin'
                            """
                        }

                        withCredentials([
                            usernamePassword(
                                credentialsId: 'NacosAccount',
                                usernameVariable: 'nacos_username',
                                passwordVariable: 'nacos_password'
                            )
                        ]) {
                            configFileProvider([configFile(
                                fileId: 'FetchConfigFromNacos',
                                targetLocation: 'fetch_nacos.sh'
                            )]) {
                                sh """
                                bash fetch_nacos.sh
                                ssh root@${node} 'mkdir -p /etc/${env.service_name}/'
                                scp -o StrictHostKeyChecking=no docker-compose.yaml root@${node}:/etc/${env.service_name}/
                                scp -o StrictHostKeyChecking=no credentials.json root@${node}:/etc/${env.service_name}/
                                rm docker-compose.yaml credentials.json
                                """
                                echo "[Nacos] 配置已推送到 ${node}"
                            }
                        }

                        sh """
                        ssh root@${node} 'echo "IMAGE_TAG=${env._version}" > /etc/${env.service_name}/.env'
                        ssh root@${node} 'docker-compose -f /etc/${env.service_name}/docker-compose.yaml -p magi-backend down --remove-orphans || true'
                        ssh root@${node} 'docker-compose -f /etc/${env.service_name}/docker-compose.yaml -p magi-backend up -d'
                        echo "服务部署成功：${env.service_name}"
                        """
                    } catch (e) {
                        error "服务部署失败: ${e}"
                    }
                }
            }
        }
    }
}