def createVersion() {
    return new Date().format('yyyyMMddHHmmss')
}

pipeline {
    agent any
    tools {git 'Default'}

    environment {
        SERVICE_ENV = "dev"
        internal_port1 = 80
        external_port1 = 18000
        service_name = 'backend'
        image_name = "${harbor_domain}/backend/${service_name}"
        repository_url = "git@github.com:AutoGameAI/Backend.git"
        GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
    }

    stages {
        stage('Check Workspace') {
            steps {
                script {
                    echo "当前工作目录: ${WORKSPACE}"
                    sh "rm -rf ./app"
                }
            }
        }

        stage('Check Branch') {
            steps {
                script {
                    if (env.BRANCH_NAME) {
                        env.branch = env.BRANCH_NAME
                        echo "BRANCH_NAME：${env.branch}"
                    } else if (env.GIT_BRANCH) {
                        env.branch = env.GIT_BRANCH.tokenize('/').last()
                        echo "GIT_BRANCH：${env.GIT_BRANCH} ${env.branch}"
                    } else {
                        env.branch = sh(
                            script: "git rev-parse --abbrev-ref HEAD",
                            returnStdout: true
                        ).trim()
                        echo "GIT_COMMAND：${env.branch}"
                    }

                    if (!env.branch.startsWith('branch')) {
                        error("⛔ 非测试环境分支触发，终止构建: ${env.branch}")
                    }

                    env._version = "dev_" + new Date().format('yyyyMMddHHmmss')
                    echo "构建分支：${env.branch} 版本号：${env._version}"
                    echo "环境变量: SERVICE_ENV=${env.SERVICE_ENV}, 项目分支=${env.branch}, 项目版本=${env._version}"
                }
            }
        }

        stage('Get Code') {
            steps {
                echo "拉取项目代码：${env.branch}"
                dir('app') {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: branch]],
                        userRemoteConfigs: [[
                            url: repository_url,
                            credentialsId: 'GitHubSSH'
                        ]]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        echo "构建镜像"
                        dir('app') {
                            withCredentials([
                                string(credentialsId: 'harbor_username', variable: 'HARBOR_USERNAME'),
                                string(credentialsId: 'harbor_password', variable: 'HARBOR_PASSWORD')
                            ]) {
                                sh """
                                echo "$HARBOR_PASSWORD" | docker login ${harbor_domain} -u $HARBOR_USERNAME --password-stdin
                                """
                            }
                            sh """
                            docker build -t ${image_name}:${env._version} .
                            docker push ${image_name}:${env._version}
                            docker rmi -f ${image_name}:${env._version}
                            """
                        }
                    } catch (e) {
                        error "构建镜像失败: ${e}"
                    }
                }
            }
        }

        stage('Deploy Service') {
            steps {
                script {
                    try {
                        def node = env.dev_node_1
                        echo "部署服务：${node}"
                        withCredentials([
                            string(credentialsId: 'harbor_username', variable: 'HARBOR_USERNAME'),
                            string(credentialsId: 'harbor_password', variable: 'HARBOR_PASSWORD')
                        ]) {
                            sh """
                            echo "$HARBOR_PASSWORD" | ssh -o StrictHostKeyChecking=no root@${node} 'docker login ${harbor_domain} -u $HARBOR_USERNAME --password-stdin'
                            """
                        }

                        sh """
                        ssh root@${node} 'docker pull ${image_name}:${env._version}'
                        echo "停止并删除现有容器: ${service_name}"
                        ssh root@${node} 'docker stop ${service_name} || true'
                        ssh root@${node} 'docker rm  -f ${service_name} || true'
                        ssh root@${node} 'docker run -d --name ${service_name} -e environ=${SERVICE_ENV} -p ${external_port1}:${internal_port1} ${image_name}:${env._version}'
                        echo "清理旧镜像"
                        ssh root@${node} 'docker image prune -af --filter "until=24h"'
                        """
                        echo "服务部署成功：${env.service_name}"
                    } catch (e) {
                        error "服务部署失败: ${e}"
                    }
                }
            }
        }
    }
}